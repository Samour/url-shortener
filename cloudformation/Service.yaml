Parameters:
  ServiceName:
    Description: Name for ECR repo
    Type: String
  ProjectPhase:
    Description: Phase of the project
    Type: String
  Version:
    Description: Artifact version
    Type: String
  DnsZoneName:
    Description: Hosted Zone name
    Type: String
  ApiDnsName:
    Description: Full DNS name for API host
    Type: String
  FEDnsName:
    Description: Full DNS name for FE access
    Type: String
  ACMHostedZoneId:
    Description: Hosted Zone ID to create ACM validation records
    Type: String
  CFCertificateArn:
    Description: ARN of TLS certificate to use for CloudFront distribution
    Type: String

Resources:
  # VPC & Routing
  ApplicationVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.0.0.0/16
      Tags:
        - Key: Project
          Value: !Ref ServiceName
        - Key: Phase
          Value: !Ref ProjectPhase

  SubnetZoneA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ApplicationVpc
      CidrBlock: 172.0.0.0/26
      AvailabilityZone: ap-southeast-2a
      Tags:
        - Key: Project
          Value: !Ref ServiceName
        - Key: Phase
          Value: !Ref ProjectPhase

  SubnetZoneB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ApplicationVpc
      CidrBlock: 172.0.0.64/26
      AvailabilityZone: ap-southeast-2b
      Tags:
        - Key: Project
          Value: !Ref ServiceName
        - Key: Phase
          Value: !Ref ProjectPhase

  SubnetZoneC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ApplicationVpc
      CidrBlock: 172.0.0.128/26
      AvailabilityZone: ap-southeast-2c
      Tags:
        - Key: Project
          Value: !Ref ServiceName
        - Key: Phase
          Value: !Ref ProjectPhase

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Project
          Value: !Ref ServiceName
        - Key: Phase
          Value: !Ref ProjectPhase

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ApplicationVpc
      InternetGatewayId: !Ref InternetGateway

  VpcRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ApplicationVpc
      Tags:
        - Key: Project
          Value: !Ref ServiceName
        - Key: Phase
          Value: !Ref ProjectPhase

  InternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !GetAtt InternetGateway.InternetGatewayId
      RouteTableId: !Ref VpcRouteTable

  SubnetARouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VpcRouteTable
      SubnetId: !Ref SubnetZoneA

  SubnetBRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VpcRouteTable
      SubnetId: !Ref SubnetZoneB

  SubnetCRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VpcRouteTable
      SubnetId: !Ref SubnetZoneC

  # Security Groups
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref ApplicationVpc
      GroupName: !Sub "${ServiceName}-service-sg"
      GroupDescription: Security group for application service containers
      SecurityGroupIngress:
        - CidrIp: !GetAtt ApplicationVpc.CidrBlock
          IpProtocol: tcp
          FromPort: 1
          ToPort: 65535
      Tags:
        - Key: Project
          Value: !Ref ServiceName
        - Key: Phase
          Value: !Ref ProjectPhase

  PublicABLSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref ApplicationVpc
      GroupName: !Sub "${ServiceName}-alb-sg"
      GroupDescription: Security group for public ALB
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 1
          ToPort: 65535
      Tags:
        - Key: Project
          Value: !Ref ServiceName
        - Key: Phase
          Value: !Ref ProjectPhase

  # Load Balancer/Ingress
  APICertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref ApiDnsName
      DomainValidationOptions:
        - DomainName: !Ref ApiDnsName
          HostedZoneId: !Ref ACMHostedZoneId
      ValidationMethod: DNS
      Tags:
        - Key: Project
          Value: !Ref ServiceName
        - Key: Phase
          Value: !Ref ProjectPhase

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${ServiceName}-alb"
      Scheme: internet-facing
      SecurityGroups:
        - !Ref PublicABLSecurityGroup
      Subnets:
        - !Ref SubnetZoneA
        - !Ref SubnetZoneB
        - !Ref SubnetZoneC
      Tags:
        - Key: Project
          Value: !Ref ServiceName
        - Key: Phase
          Value: !Ref ProjectPhase

  PublicHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref PublicLoadBalancer
      Protocol: HTTPS
      Port: 443
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 404
      Certificates:
        - CertificateArn: !Ref APICertificate

  ApplicationTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref ApplicationVpc
      Name: !Sub "${ServiceName}-target-group"
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: !Sub "/${ServiceName}/actuator/health"
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: "deregistration_delay.timeout_seconds"
          Value: "30"
      Tags:
        - Key: Project
          Value: !Ref ServiceName
        - Key: Phase
          Value: !Ref ProjectPhase

  ApplicationListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Priority: 1
      ListenerArn: !Ref PublicHttpListener
      Conditions:
        - Field: path-pattern
          Values:
            - !Sub "/${ServiceName}/v1/*"
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ApplicationTargetGroup

  IngressDns:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref DnsZoneName
      Name: !Ref ApiDnsName
      AliasTarget:
        DNSName: !GetAtt PublicLoadBalancer.DNSName
        HostedZoneId: !GetAtt PublicLoadBalancer.CanonicalHostedZoneID
      Type: A

  # Dynamo tables
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ServiceName}-user"
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: canonicalUsername
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: !Sub "${ServiceName}-user-canonical-username"
          KeySchema:
            - AttributeName: canonicalUsername
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Project
          Value: !Ref ServiceName
        - Key: Phase
          Value: !Ref ProjectPhase

  SessionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ServiceName}-session"
      KeySchema:
        - AttributeName: sessionId
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: sessionId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Project
          Value: !Ref ServiceName
        - Key: Phase
          Value: !Ref ProjectPhase

  # ECS Deployment
  ContainerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${ServiceName}/ecs"
      Tags:
        - Key: Project
          Value: !Ref ServiceName
        - Key: Phase
          Value: !Ref ProjectPhase

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${ServiceName}-cluster"
      CapacityProviders:
        - FARGATE_SPOT
      Tags:
        - Key: Project
          Value: !Ref ServiceName
        - Key: Phase
          Value: !Ref ProjectPhase

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ServiceName}-task-exec-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: ECRPull
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetAuthorizationToken"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
      Tags:
        - Key: Project
          Value: !Ref ServiceName
        - Key: Phase
          Value: !Ref ProjectPhase

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ServiceName}-task-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:UpdateItem"
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ServiceName}-user"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ServiceName}-user/index/*"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ServiceName}-session"

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ServiceName
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image:
            Fn::Join:
              - ":"
              - - Fn::ImportValue: !Sub "${ServiceName}-ecr-uri"
                - !Ref Version
          Environment:
            - Name: SERVICE_NAME
              Value: !Ref ServiceName
            - Name: SPRING_PROFILES_ACTIVE
              Value: json-logging
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ContainerLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Sub "${ServiceName}-container"
      Cpu: 256
      Memory: 512
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Project
          Value: !Ref ServiceName
        - Key: Phase
          Value: !Ref ProjectPhase
        - Key: Version
          Value: !Ref Version

  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ApplicationListenerRule
    Properties:
      ServiceName: !Sub "${ServiceName}-service"
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets:
            - !Ref SubnetZoneA
            - !Ref SubnetZoneB
            - !Ref SubnetZoneC
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: 8080
          TargetGroupArn: !Ref ApplicationTargetGroup
      Tags:
        - Key: Project
          Value: !Ref ServiceName
        - Key: Phase
          Value: !Ref ProjectPhase
        - Key: Version
          Value: !Ref Version

  # Cloudfront distribution
  CFOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "OAI for ${ServiceName} FE distribution"

  CFBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Sub "fe.${ServiceName}.samour.net"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
            Resource:
              - !Sub "arn:aws:s3:::fe.${ServiceName}.samour.net/*"
            Principal:
              AWS:
                - !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CFOriginAccessIdentity}"

  FECloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: !Sub "${ServiceName}-cf-origin"
            DomainName: !Sub "fe.${ServiceName}.samour.net.s3.${AWS::Region}.amazonaws.com"
            OriginPath: !Sub "/${Version}"
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CFOriginAccessIdentity}"
        DefaultRootObject: "index.html"
        CustomErrorResponses:
          # Due to CF/S3 permissions, an "object not found" will result in 403 response code
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: "/index.html"
        Aliases:
          - !Ref FEDnsName
        ViewerCertificate:
          AcmCertificateArn: !Ref CFCertificateArn
          MinimumProtocolVersion: TLSv1.2_2019
          SslSupportMethod: sni-only
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: !Sub "${ServiceName}-cf-origin"
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          ViewerProtocolPolicy: redirect-to-https
      Tags:
        - Key: Project
          Value: !Ref ServiceName
        - Key: Phase
          Value: !Ref ProjectPhase
        - Key: Version
          Value: !Ref Version

  FEDns:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref DnsZoneName
      Name: !Ref FEDnsName
      AliasTarget:
        DNSName: !GetAtt FECloudFront.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
      Type: A
